[
  {
    "name": "async-defer-attributes.md",
    "question": "What are `defer` and `async` attributes on a `<script>` tag?",
    "answer": "If neither attribute is present, the script is downloaded and executed synchronously, and will halt parsing of the document until it has finished executing (default behavior). Scripts are downloaded and executed in the order\nthey are encountered.\n\nThe `defer` attribute downloads the script while the document is still parsing but waits until the document has finished parsing before executing it, equivalent to executing inside a `DOMContentLoaded` event listener. `defer` scripts will execute in order.\n\nThe `async` attribute downloads the script during parsing the document but will pause the parser to execute the script before it has fully finished parsing. `async` scripts will not necessarily execute in order.\n\nNote: both attributes must only be used if the script has a `src` attribute (i.e. not an inline script).\n\n```html\n<script src=\"myscript.js\"></script>\n<script src=\"myscript.js\" defer></script>\n<script src=\"myscript.js\" async></script>\n```",
    "goodToHear": [
      "Placing a `defer` script in the `<head>` allows the browser to download the script while the page is still parsing, and is therefore a better option than placing the script before the end of the body.",
      "If the scripts rely on each other, use `defer`.",
      "If the script is independent, use `async`.",
      "Use `defer` if the DOM must be ready and the contents are not placed within a `DOMContentLoaded` listener."
    ],
    "links": [
      "[async vs defer attributes](http://www.growingwiththeweb.com/2014/02/async-vs-defer-attributes.html)"
    ],
    "tags": [
      "html"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```html\n<script src=\"myscript.js\"></script>\n<script src=\"myscript.js\" defer></script>\n<script src=\"myscript.js\" async></script>\n```"
    ]
  },
  {
    "name": "bem.md",
    "question": "What is CSS BEM?",
    "answer": "The BEM methodology is a naming convention for CSS classes in order to keep CSS more maintainable by defining namespaces to solve scoping issues. BEM stands for Block Element Modifier which is an explanation for its structure. A Block is a standalone component that is reusable across projects and acts as a \"namespace\" for sub components (Elements). Modifiers are used as flags when a Block or Element is in a certain state or is different in structure or style.\n\n```css\n/* block component */\n.block {\n}\n\n/* element */\n.block__element {\n}\n\n/* modifier */\n.block__element--modifier {\n}\n```\n\nHere is an example with the class names on markup:\n\n```html\n<nav class=\"navbar\">\n  <a href=\"/\" class=\"navbar__link navbar__link--active\"></a>\n  <a href=\"/\" class=\"navbar__link\"></a>\n  <a href=\"/\" class=\"navbar__link\"></a>\n</nav>\n```\n\nIn this case, `navbar` is the Block, `navbar__link` is an Element that makes no sense outside of the `navbar` component, and `navbar__link--active` is a Modifier that indicates a different state for the `navbar__link` Element.\n\nSince Modifiers are verbose, many opt to use `is-*` flags instead as modifiers.\n\n```html\n<a href=\"/\" class=\"navbar__link is-active\"></a>\n```\n\nThese must be chained to the Element and never alone however, or there will be scope issues.\n\n```css\n.navbar__link.is-active {\n}\n```",
    "goodToHear": [
      "Alternative solutions to scope issues like CSS-in-JS"
    ],
    "links": [
      "[Writing clean and maintainable CSS](https://hackernoon.com/writing-clean-and-maintainable-css-using-bem-methodology-1dcbf810a664)"
    ],
    "tags": [
      "css"
    ],
    "expertise": 0,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```css\n/* block component */\n.block {\n}\n\n/* element */\n.block__element {\n}\n\n/* modifier */\n.block__element--modifier {\n}\n```",
      "```html\n<nav class=\"navbar\">\n  <a href=\"/\" class=\"navbar__link navbar__link--active\"></a>\n  <a href=\"/\" class=\"navbar__link\"></a>\n  <a href=\"/\" class=\"navbar__link\"></a>\n</nav>\n```",
      "```html\n<a href=\"/\" class=\"navbar__link is-active\"></a>\n```",
      "```css\n.navbar__link.is-active {\n}\n```"
    ]
  },
  {
    "name": "callback-hell.md",
    "question": "How can you avoid callback hells?\n\n```js\ngetData(function(a){  \n  getMoreData(a, function(b){\n    getMoreData(b, function(c){ \n      getMoreData(c, function(d){ \n        getMoreData(d, function(e){ \n          //  ...\n        })\n      })\n    })\n  })\n})\n```",
    "answer": "There are lots of ways to solve the issue of callback hells:\n\n* modularization: break callbacks into independent functions\n* use a control flow library, like async\n* use generators with Promises\n* use async/await (from v7 on)",
    "goodToHear": [
      "As an efficient JavaScript developer, you have to avoid the constantly growing indentation level, produce clean and readable code and be able to handle complex flows."
    ],
    "links": [
      "[Avoiding Callback Hell in Node.js](http://stackabuse.com/avoiding-callback-hell-in-node-js/)",
      "[Asynchronous JavaScript: From Callback Hell to Async and Await](https://blog.hellojs.org/asynchronous-javascript-from-callback-hell-to-async-and-await-9b9ceb63c8e8)"
    ],
    "tags": [
      "node",
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [
      "```js\ngetData(function(a){  \n  getMoreData(a, function(b){\n    getMoreData(b, function(c){ \n      getMoreData(c, function(d){ \n        getMoreData(d, function(e){ \n          //  ...\n        })\n      })\n    })\n  })\n})\n```"
    ],
    "answerCodeBlocks": []
  },
  {
    "name": "callbacks.md",
    "question": "What is a callback?",
    "answer": "Callbacks are functions passed as an argument to another function to be executed once an event has occurred or a certain task is complete, often used in asynchronous code. Callback functions are invoked later by a piece of code but can be declared on initialization without being invoked.\n\nEvent listeners are callbacks that are only executed when a specific event occurs.\n\n```js\nfunction onClick() {\n  console.log(\"The user clicked on the page.\")\n}\ndocument.addEventListener(\"click\", onClick)\n```",
    "goodToHear": [
      "Functions are first-class objects in JavaScript",
      "Callbacks vs Promises"
    ],
    "links": [
      "[MDN docs for callbacks](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nfunction onClick() {\n  console.log(\"The user clicked on the page.\")\n}\ndocument.addEventListener(\"click\", onClick)\n```"
    ]
  },
  {
    "name": "clone-object.md",
    "question": "How do you clone an object in JavaScript?",
    "answer": "Using the object spread operator `...`, the object's own enumerable properties can be copied\ninto the new object. This creates a shallow clone of the object.\n\n```js\nconst obj = { a: 1, b: 2 }\nconst shallowClone = { ...obj }\n```\n\nWith this technique, prototypes are ignored. In addition, nested objects are not cloned, but rather their references get copied, so nested objects still refer to the same objects as the original. Deep-cloning is much more complex in order to effectively clone any type of object (Date, RegExp, Function, Set, etc) that may be nested within the object.\n\nOther alternatives include:\n\n* `JSON.parse(JSON.stringify(obj))` can be used to deep-clone a simple object, but it is CPU-intensive and only accepts valid JSON (therefore it strips functions and does not allow circular references).\n* `Object.assign({}, obj)` is another alternative.\n* `Object.keys(obj).reduce((acc, key) => (acc[key] = obj[key], acc), {})` is another more verbose alternative that shows the concept in greater depth.",
    "goodToHear": [
      "JavaScript passes objects by reference, meaning that nested objects get their references copied, instead of their values.",
      "The same method can be used to merge two objects."
    ],
    "links": [
      "[MDN docs for Object.assign()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)",
      "[Clone an object in vanilla JS](http://voidcanvas.com/clone-an-object-in-vanilla-js-in-depth/)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nconst obj = { a: 1, b: 2 }\nconst shallowClone = { ...obj }\n```"
    ]
  },
  {
    "name": "closures.md",
    "question": "What is a closure?",
    "answer": "A closure is a function defined inside another function and has access to its lexical scope even when it is executing outside its lexical scope. The closure has access to variables in three scopes:\n\n* Variables declared in its own scope\n* Variables declared in the scope of the parent function\n* Variables declared in the global scope",
    "goodToHear": [
      "Closures are useful because they let you associate data with a function that operates on that data.",
      "A closure can substitute an object with only a single method.",
      "Closures can be used to emulate private methods."
    ],
    "links": [
      "[MDN docs for closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)",
      "[What is a closure](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36)",
      "[I never understood JavaScript closures](https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "comparing-objects.md",
    "question": "How do you compare two objects in JavaScript?",
    "answer": "Even though two different objects can have the same properties with equal values, they are not considered equal when compared using `==` or `===`. This is because they are being compared by their reference (location in memory), unlike primitive values which are compared by value.\n\nIn order to test if two objects are equal in structure, a helper function is required. It will\niterate through the own properties of each object to test if they have the same values, including nested objects.\nOptionally, the prototypes of the objects may also be tested for equivalence by passing `true` as the 3rd argument.\n\nNote: this technique does not attempt to test equivalence of data structures other than\nplain objects, arrays, functions, dates and primitive values.\n\n```js\nfunction isDeepEqual(obj1, obj2, testPrototypes = false) {\n  if (obj1 === obj2) {\n    return true\n  }\n\n  if (typeof obj1 === \"function\" && typeof obj2 === \"function\") {\n    return obj1.toString() === obj2.toString()\n  }\n\n  if (obj1 instanceof Date && obj2 instanceof Date) {\n    return obj1.getTime() === obj2.getTime()\n  }\n\n  const prototypesAreEqual = testPrototypes\n    ? isDeepEqual(\n      Object.getPrototypeOf(obj1),\n      Object.getPrototypeOf(obj2),\n      true\n    )\n    : true\n\n  const obj1Props = Object.getOwnPropertyNames(obj1)\n  const obj2Props = Object.getOwnPropertyNames(obj2)\n\n  return (\n    obj1Props.length === obj2Props.length &&\n    prototypesAreEqual &&\n    obj1Props.every(prop => isDeepEqual(obj1[prop], obj2[prop]))\n  )\n}\n```",
    "goodToHear": [
      "Primitives like strings and numbers are compared by their value",
      "Objects on the other hand are compared by their reference (location in memory)"
    ],
    "links": [
      "[Object Equality in JavaScript](http://adripofjavascript.com/blog/drips/object-equality-in-javascript.html)",
      "[Deep comparison between two values](https://30secondsofcode.org/object#equals)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nfunction isDeepEqual(obj1, obj2, testPrototypes = false) {\n  if (obj1 === obj2) {\n    return true\n  }\n\n  if (typeof obj1 === \"function\" && typeof obj2 === \"function\") {\n    return obj1.toString() === obj2.toString()\n  }\n\n  if (obj1 instanceof Date && obj2 instanceof Date) {\n    return obj1.getTime() === obj2.getTime()\n  }\n\n  const prototypesAreEqual = testPrototypes\n    ? isDeepEqual(\n      Object.getPrototypeOf(obj1),\n      Object.getPrototypeOf(obj2),\n      true\n    )\n    : true\n\n  const obj1Props = Object.getOwnPropertyNames(obj1)\n  const obj2Props = Object.getOwnPropertyNames(obj2)\n\n  return (\n    obj1Props.length === obj2Props.length &&\n    prototypesAreEqual &&\n    obj1Props.every(prop => isDeepEqual(obj1[prop], obj2[prop]))\n  )\n}\n```"
    ]
  },
  {
    "name": "css-preprocessors.md",
    "question": "What are the advantages of using CSS preprocessors?",
    "answer": "CSS preprocessors add useful functionality that native CSS does not have, and generally make CSS neater and more maintainable by enabling DRY (Don't Repeat Yourself) principles. Their terse syntax for nested selectors cuts down on repeated code. They provide variables for consistent theming (however, CSS variables have largely replaced this functionality) and additional tools like color functions (`lighten`, `darken`, `transparentize`, etc), variables, mixins, and loops that make CSS more like a real programming language and gives the developer more power to generate complex CSS.",
    "goodToHear": [
      "They allow us to write more maintainable and scalable CSS",
      "Some disadvantages of using CSS preprocessors (setup, re-compilation time can be slow etc.)"
    ],
    "links": [
      "[CSS Preprocessors](https://medium.com/@garyfagan/css-preprocessors-6f226fa16f27)"
    ],
    "tags": [
      "css"
    ],
    "expertise": 0,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "css-specificity.md",
    "question": "Can you describe how CSS specificity works?",
    "answer": "Assuming the browser has already determined the set of rules for an element, each rule is assigned a matrix of values, which correspond to the following from highest to lowest specificity:\n\n* Inline rules (binary - 1 or 0)\n* Number of id selectors\n* Number of class, pseudo-class and attribute selectors\n* Number of tags and pseudo-element selectors\n\nWhen two selectors are compared, the comparison is made on a per-column basis (e.g. an id selector will always be higher than any amount of class selectors, as ids have higher specificity than classes). In cases of equal specificity between multiple rules, the rules that comes last in the page's style sheet is deemed more specific and therefore applied to the element.",
    "goodToHear": [
      "Specificity matrix: [inline, id, class/pseudo-class/attribute, tag/pseudo-element]",
      "In cases of equal specificity, last rule is applied"
    ],
    "links": [
      "[CSS Specificity](https://www.smashingmagazine.com/2007/07/css-specificity-things-you-should-know/)"
    ],
    "tags": [
      "css"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "dom.md",
    "question": "What is the DOM?",
    "answer": "The DOM (Document Object Model) is an API that represents the structure of HTML and XML documents. The document\nis represented by a node tree (such as elements, text nodes, comments), where each node is an object that can be manipulated via JavaScript to change their styles, contents, placement in the tree, or interacted with through event listeners.",
    "goodToHear": [
      "The DOM was designed to be independent of any particular programming language, making the structural representation of the document available from a single, consistent API",
      "The DOM is constructed progressively in the browser as a page loads, which is why scripts are often placed at the bottom of a page, in the `<head>` with a `defer` attribute, or inside a `DOMContentLoaded` event listener. Scripts that manipulate DOM nodes should be run after the DOM has been constructed to avoid errors."
    ],
    "links": [
      "[MDN docs for DOM](https://developer.mozilla.org/en-US/docs/DOM)"
    ],
    "tags": [
      "html",
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "double-vs-triple-equals.md",
    "question": "What is the difference between the equality operators `==` and `===`?",
    "answer": "Triple equals (`===`) checks for strict equality, which means both the type and value must be the same. Double equals (`==`) on the other hand first performs type coercion so that both operands are of the same type and then applies strict comparison.",
    "goodToHear": [
      "Whenever possible, use triple equals to test equality because loose equality `==` can have unintuitive results",
      "Type coercion means the values are converted into the same type",
      "Mention of falsy values and their comparison"
    ],
    "links": [
      "[MDN docs for comparison operators](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 0,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "event-driven-programming.md",
    "question": "What is event-driven programming?",
    "answer": "Event-driven programming is building an application that is based on and responds to events. Whenever an event occurs, the application responds by running a callback function, which is registered to that event and context.",
    "goodToHear": [
      "Responds to events that occur by running a callback function",
      "Follows a publish-subscribe pattern"
    ],
    "links": [
      "[MDN docs on Events and Handlers](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Overview_of_Events_and_Handlers)",
      "[Understanding Node.js event-driven architecture](https://medium.freecodecamp.org/understanding-node-js-event-driven-architecture-223292fcbc2d)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "fibonacci.md",
    "question": "Generate an array, containing the Fibonacci sequence, up until the nth term.",
    "answer": "Initialize an empty array of length `n`. Use `Array.prototype.reduce()` to add values into the array, using the sum of the last two values, except for the first two.\n\n```js\nconst fibonacci = n =>\n  [...Array(n)].reduce(\n    (acc, val, i) => acc.concat(i > 1 ? acc[i - 1] + acc[i - 2] : i),\n    []\n  )\n```",
    "goodToHear": [],
    "links": [
      "[Similar problem](https://github.com/Chalarangelo/30-seconds-of-code/blob/master/snippets_archive/fibonacciUntilNum.md)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nconst fibonacci = n =>\n  [...Array(n)].reduce(\n    (acc, val, i) => acc.concat(i > 1 ? acc[i - 1] + acc[i - 2] : i),\n    []\n  )\n```"
    ]
  },
  {
    "name": "flex-layout.md",
    "question": "Using flexbox, create a 3-column layout where each column takes up a `col-{n} / 12` ratio of the container.\n\n```html\n<div class=\"row\">\n  <div class=\"col-2\"></div>\n  <div class=\"col-7\"></div>\n  <div class=\"col-3\"></div>\n</div>\n```",
    "answer": "Set the `.row` parent to `display: flex;` and use the `flex` shorthand property to give the column classes a `flex-grow` value that corresponds to its ratio value.\n\n```css\n.row {\n  display: flex;\n}\n\n.col-2 {\n  flex: 2;\n}\n\n.col-7 {\n  flex: 7;\n}\n\n.col-3 {\n  flex: 3;\n}\n```",
    "goodToHear": [],
    "links": [
      "[MDN docs for basic concepts of flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox)",
      "[A complete guide to Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)"
    ],
    "tags": [
      "css"
    ],
    "expertise": 0,
    "questionCodeBlocks": [
      "```html\n<div class=\"row\">\n  <div class=\"col-2\"></div>\n  <div class=\"col-7\"></div>\n  <div class=\"col-3\"></div>\n</div>\n```"
    ],
    "answerCodeBlocks": [
      "```css\n.row {\n  display: flex;\n}\n\n.col-2 {\n  flex: 2;\n}\n\n.col-7 {\n  flex: 7;\n}\n\n.col-3 {\n  flex: 3;\n}\n```"
    ]
  },
  {
    "name": "floating-point.md",
    "question": "What does `0.1 + 0.2 === 0.3` evaluate to?",
    "answer": "It evaluates to `false` because JavaScript uses the IEEE 754 standard for Math and it makes use of 64-bit floating numbers. This causes precision errors when doing decimal calculations, in short, due to computers working in Base 2 while decimal is Base 10.\n\n```js\n0.1 + 0.2 // 0.30000000000000004\n```\n\nA solution to this problem would be to use a function that determines if two numbers are approximately equal by defining an error margin (epsilon) value that the difference between two values should be less than.\n\n```js\nconst approxEqual = (n1, n2, epsilon = 0.0001) => Math.abs(n1 - n2) < epsilon\napproxEqual(0.1 + 0.2, 0.3) // true\n```",
    "goodToHear": [
      "A simple solution to this problem"
    ],
    "links": [
      "[A simple helper function to check equality](https://github.com/Chalarangelo/30-seconds-of-code#approximatelyequal)",
      "[Fix \"0.1 + 0.2 = 0.300000004\" in JavaScript](http://blog.blakesimpson.co.uk/read/61-fix-0-1-0-2-0-300000004-in-javascript)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\n0.1 + 0.2 // 0.30000000000000004\n```",
      "```js\nconst approxEqual = (n1, n2, epsilon = 0.0001) => Math.abs(n1 - n2) < epsilon\napproxEqual(0.1 + 0.2, 0.3) // true\n```"
    ]
  },
  {
    "name": "focus-ring.md",
    "question": "What is a focus ring? What is the correct solution to handle them?",
    "answer": "A focus ring is a visible outline given to focusable elements such as buttons and anchor tags. It varies depending on the vendor, but generally it appears as a blue outline around the element to indicate it is currently focused.\n\nIn the past, many people specified `outline: 0;` on the element to remove the focus ring. However, this causes accessibility issues for keyboard users because the focus state may not be clear. When not specified though, it causes an unappealing blue ring to appear around an element.\n\nIn recent times, frameworks like Bootstrap have opted to use a more appealing `box-shadow` outline to replace the default focus ring. However, this is still not ideal for mouse users.\n\nThe best solution is an upcoming pseudo-selector `:focus-visible` which can be polyfilled today with JavaScript. It will only show a focus ring if the user is using a keyboard and leave it hidden for mouse users. This keeps both aesthetics for mouse use and accessibility for keyboard use.",
    "goodToHear": [],
    "links": [
      "[:focus-visible](https://css-tricks.com/focus-visible-and-backwards-compatibility/)"
    ],
    "tags": [
      "css"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "for-each-map.md",
    "question": "What is the difference between the array methods `map()` and `forEach()`?",
    "answer": "Both methods iterate through the elements of an array. `map()` maps each element to new element by invoking the callback function on each element and returns a new array. On the other hand, `forEach()` invokes the callback function for each element but does not return a new array. `forEach()` is generally used when causing a side effect on each iteration, whereas `map()` is a common functional programming technique.",
    "goodToHear": [
      "Use `forEach()` if you need to iterate over an array and cause mutations to the elements without needing to return values to generate a new array.",
      "`map()` is the right choice to keep data immutable where each value of the original array is mapped to a new array."
    ],
    "links": [
      "[MDN docs for forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)",
      "[MDN docs for map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)",
      "[JavaScript — Map vs. ForEach](https://codeburst.io/javascript-map-vs-foreach-f38111822c0f)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "functional-programming.md",
    "question": "What is functional programming?",
    "answer": "Functional programming is a paradigm in which programs are built in a declarative manner using pure functions that avoid shared state and mutable data. Functions that always return the same value for the same input and don't produce side effects are the pillar of functional programming. Many programmers consider this to be the best approach to software development as it reduces bugs and cognitive load.",
    "goodToHear": [
      "Cleaner, more concise development experience",
      "Simple function composition",
      "Features of JavaScript that enable functional programming (`.map`, `.reduce` etc.)",
      "JavaScript is multi-paradigm programming language (Object-Oriented Programming and Functional Programming live in harmony)"
    ],
    "links": [
      "[Javascript and Functional Programming: An Introduction](https://hackernoon.com/javascript-and-functional-programming-an-introduction-286aa625e26d)",
      "[Master the JavaScript Interview: What is Functional Programming?](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "hoisting-example.md",
    "question": "What will the console log in this example?\n\n```js\nvar foo = 1\nvar foobar = function() {\n  console.log(foo)\n  var foo = 2\n}\nfoobar()\n```",
    "answer": "Due to hoisting, the local variable `foo` is declared before the `console.log` method is called. This means the local variable `foo` is passed as an argument to `console.log()` instead of the global one declared outside of the function. However, since the value is not hoisted with the variable declaration, the output will be `undefined`, not `2`.",
    "goodToHear": [
      "Hoisting is JavaScript’s default behavior of moving declarations to the top",
      "Mention of `strict` mode"
    ],
    "links": [
      "[MDN docs for hoisting](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [
      "```js\nvar foo = 1\nvar foobar = function() {\n  console.log(foo)\n  var foo = 2\n}\nfoobar()\n```"
    ],
    "answerCodeBlocks": []
  },
  {
    "name": "hoisting.md",
    "question": "How does hoisting work in JavaScript?",
    "answer": "Hoisting is a JavaScript mechanism where variables and function declarations are put into memory during the compile phase. This means that no matter where functions and variables are declared, they are moved to the top of their scope regardless of whether their scope is global or local.\n\n```js\nconsole.log(hoist) // Output: undefined\nvar hoist = \"The variable has been hoisted.\"\n```",
    "goodToHear": [
      "Hoisting is JavaScript’s default behavior of moving declarations to the top",
      "Functions are hoisted before variables",
      "Mention of `strict` mode",
      "`const` variables must be both declared and initialised before use",
      "`let` variables must be declared before use"
    ],
    "links": [
      "[MDN docs for hoisting](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting)",
      "[Understanding Hoisting in JavaScript](https://scotch.io/tutorials/understanding-hoisting-in-javascript)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nconsole.log(hoist) // Output: undefined\nvar hoist = \"The variable has been hoisted.\"\n```"
    ]
  },
  {
    "name": "html-multiple-header-footers.md",
    "question": "Can a web page contain multiple `<header>` elements? What about `<footer>` elements?",
    "answer": "Yes to both. The W3 documents state that the tags represent the header(`<header>`) and footer(`<footer>`) areas of their nearest ancestor \"section\". So not only can the page `<body>` contain a header and a footer, but so can every `<article>` and `<section>` element.",
    "goodToHear": [
      "W3 recommends having as many as you want, but only 1 of each for each \"section\" of your page, i.e. body, section etc."
    ],
    "links": [
      "[StackOverflow - Using header or footer tag twice](https://stackoverflow.com/questions/4837269/html5-using-header-or-footer-tag-twice?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa)"
    ],
    "tags": [
      "html"
    ],
    "expertise": 0,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "html-specification-implementation.md",
    "question": "Discuss the differences between an HTML specification and a browser’s implementation thereof.",
    "answer": "HTML specifications such as `HTML5` define a set of rules that a document must adhere to in order to be “valid” according to that specification. In addition, a specification provides instructions on how a browser must interpret and render such a document.\n\nA browser is said to “support” a specification if it handles valid documents according to the rules of the specification. As of yet, no browser supports all aspects of the `HTML5` specification (although all of the major browser support most of it), and as a result, it is necessary for the developer to confirm whether the aspect they are making use of will be supported by all of the browsers on which they hope to display their content. This is why cross-browser support continues to be a headache for developers, despite the improved specificiations.",
    "goodToHear": [
      "`HTML5` defines some rules to follow for an invalid `HTML5` document (i.e., one that contains syntactical errors)",
      "However, invalid documents may contain anything, so it's impossible for the specification to handle all possibilities comprehensively. ",
      "Thus, many decisions about how to handle malformed documents are left up to the browser."
    ],
    "links": [
      "[HTML 5.2 WWW Specifications](https://www.w3.org/TR/html52/)"
    ],
    "tags": [
      "html"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "html-vs-xhtml.md",
    "question": "What are some differences that XHTML has compared to HTML?",
    "answer": "Some of the key differences are:\n\n* An XHTML element must have an XHTML `<DOCTYPE>`\n* Attributes values must be enclosed in quotes\n* Attribute minimization is forbidden (e.g. one has to use `checked=\"checked\"` instead of `checked`)\n* Elements must always be properly nested\n* Elements must always be closed\n* Special characters must be escaped",
    "goodToHear": [
      "Any element can be self-closed",
      "Tags ands attributes are case-sensitive, usually lowercase"
    ],
    "links": [
      "[W3Schools docs for HTML and XHTML](https://www.w3schools.com/html/html_xhtml.asp)"
    ],
    "tags": [
      "html"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "html5-semantic-elements-usage.md",
    "question": "Briefly describe the correct usage of the following HTML5 semantic elements: `<header>`, `<article>`,` <section>`, `<footer>`",
    "answer": "* <header> is used to contain introductory and navigational information about a section of the page. This can include the section heading, the author’s name, time and date of publication, table of contents, or other navigational information.\n\n* <article> is meant to house a self-contained composition that can logically be independently recreated outside of the page without losing it’s meaining. Individual blog posts or news stories are good examples.\n\n* <section> is a flexible container for holding content that shares a common informational theme or purpose.\n\n* <footer> is used to hold information that should appear at the end of a section of content and contain additional information about the section. Author’s name, copyright information, and related links are typical examples of such content.",
    "goodToHear": [
      "Other semantic elements are `<form>` and `<table>`"
    ],
    "links": [
      "[HTML 5 Semantic Elements](https://www.w3schools.com/html/html5_semantic_elements.asp)"
    ],
    "tags": [
      "html"
    ],
    "expertise": 0,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "html5-web-storage.md",
    "question": "What is HTML5 Web Storage? Explain `localStorage` and `sessionStorage`.",
    "answer": "With HTML5, web pages can store data locally within the user’s browser.\nThe data is stored in name/value pairs, and a web page can only access data stored by itself.\n\n**Differences between `localStorage` and `sessionStorage` regarding lifetime:**\n\n* Data stored through `localStorage` is permanent: it does not expire and remains stored on the user’s computer until a web app deletes it or the user asks the browser to delete it.\n* `sessionStorage` has the same lifetime as the top-level window or browser tab in which the data got stored. When the tab is permanently closed, any data stored through `sessionStorage` is deleted.\n\n**Differences between `localStorage` and `sessionStorage` regarding storage scope:**\nBoth forms of storage are scoped to the document origin so that documents with different origins will never share the stored objects.\n\n* `sessionStorage` is also scoped on a per-window basis. Two browser tabs with documents from the same origin have separate `sessionStorage` data.\n* Unlike in `localStorage`, the same scripts from the same origin can't access each other's `sessionStorage` when opened in different tabs.",
    "goodToHear": [
      "Earlier, this was done with cookies. ",
      "The storage limit is far larger (at least 5MB) than with cookies and its faster.",
      "The data is never transferred to the server and can only be used if the client specifically asks for it."
    ],
    "links": [
      "[W3Schools - HTML5 Webstorage](https://www.w3schools.com/html/html5_webstorage.asp)"
    ],
    "tags": [
      "html"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "image-accessibility.md",
    "question": "What is the purpose of `alt` attribute on images?",
    "answer": "The `alt` attribute provides alternative information for an image if a user cannot view it. If the image is for decorative purposes only, the `alt` attribute should be empty. On the other hand, if image contains information the `alt` attribute should describe image.",
    "goodToHear": [
      "Decorative images should have empty `alt` tag"
    ],
    "links": [
      "[A good basis for accessibility](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML)"
    ],
    "tags": [
      "html"
    ],
    "expertise": 0,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "mask.md",
    "question": "Create a function that masks a string of characters with `#` except for the last four (4) characters.\n\n```js\nmask(\"123456789\") // \"#####6789\"\n```",
    "answer": "> There are many ways to solve this problem, this is just one one of them.\n\nUsing `String.prototype.slice()`, we can grab a portion of the string from index `0` (first character) to index `-4` (5th last character) and calculate the resulting length, using `String.prototype.repeat()` to repeat the mask character that many times. Then, using `String.prototype.slice()` once more, we can concatenate the last 4 characters by passing `-4` as an argument.\n\n```js\nconst mask = (str, maskChar = \"#\") =>\n  maskChar.repeat(str.slice(0, -4).length) + str.slice(-4)\n```",
    "goodToHear": [
      "Short, one-line functional solutions to problems should be preferred provided they are efficient"
    ],
    "links": [],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [
      "```js\nmask(\"123456789\") // \"#####6789\"\n```"
    ],
    "answerCodeBlocks": [
      "```js\nconst mask = (str, maskChar = \"#\") =>\n  maskChar.repeat(str.slice(0, -4).length) + str.slice(-4)\n```"
    ]
  },
  {
    "name": "media-properties.md",
    "question": "Can you name the four types of `@media` properties?",
    "answer": "* `all`, which applies to all media type devices\n* `print`, which only applies to printers\n* `screen`, which only applies to screens (desktops, tablets, mobile etc.)\n* `speech`, which only applies to screenreaders",
    "goodToHear": [],
    "links": [
      "[MDN docs for `@media` rule](https://developer.mozilla.org/en-US/docs/Web/CSS/@media)",
      "[MDN docs for using media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries)"
    ],
    "tags": [
      "css"
    ],
    "expertise": 0,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "mutable-vs-immutable.md",
    "question": "Explain the difference between mutability and immutability, and mutating vs non-mutating methods.",
    "answer": "\"Mutability\" means a value is subject to change. \"Immutability\" means a value cannot change.\n\nObjects are mutable, while primitive values (strings, numbers, etc) are immutable. This means any operation performed on a primitive value does not change the original value.\n\nAll `String.prototype` methods do not have an effect on the original string and return a new string. On the other hand, while some methods of `Array.prototype` do not mutate the original array reference and produce a fresh array, some cause mutations.\n\n```js\nconst myString = \"hello!\"\nmyString.replace(\"!\", \"\") // returns a new string, cannot mutate the original value\n\nconst originalArray = [1, 2, 3]\noriginalArray.push(4) // mutates originalArray, now [1, 2, 3, 4]\noriginalArray.concat(4) // returns a new array, does not mutate the original\n```",
    "goodToHear": [
      "List of mutating and non-mutating array methods"
    ],
    "links": [
      "[Mutating vs non-mutating array methods](https://lorenstewart.me/2017/01/22/javascript-array-methods-mutating-vs-non-mutating/)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nconst myString = \"hello!\"\nmyString.replace(\"!\", \"\") // returns a new string, cannot mutate the original value\n\nconst originalArray = [1, 2, 3]\noriginalArray.push(4) // mutates originalArray, now [1, 2, 3, 4]\noriginalArray.concat(4) // returns a new array, does not mutate the original\n```"
    ]
  },
  {
    "name": "nan.md",
    "question": "What is the only value not equal to itself in JavaScript?",
    "answer": "`NaN` (Not-a-Number) is the only value not equal to itself when comparing with any of the comparison operators. `NaN` is often the result of meaningless math computations, so two `NaN` values make no sense to be considered equal.",
    "goodToHear": [
      "The difference between `isNaN()` and `Number.isNaN()`",
      "`const isNaN = x => x !== x`"
    ],
    "links": [
      "[MDN docs for `NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "node-error-first-callback.md",
    "question": "NodeJS uses a callback pattern in many instances where if an error were returned it will pass it as the first argument to the callback. What are the advantages of this pattern?\n\n```js\nfs.readFile(filePath, function(err, data) {  \n  if (err) {\n    // handle the error, the return is important here\n    // so execution stops here\n    return console.log(err)\n  }\n  // use the data object\n  console.log(data)\n})\n```",
    "answer": "Advantages include:\n\n* Not needing to process data if there is no need to even reference it\n* Having a consistent API leads to more adoption\n* Ability to easily adapt a callback pattern that will lead to more maintainable code\n\nAs you can see from below example, the callback is called with null as its first argument if there is no error. However, if there is an error, you create an Error object, which then becomes the callback's only parameter. The callback function allows a user to easily know whether or not an error occurred. \n\nThis practice is also called the _Node.js error convention_, and this kind of callback implementations are called _error-first callbacks_.\n\n```js\nvar isTrue = function(value, callback) {\n  if (value === true) {\n    callback(null, \"Value was true.\")\n  } else {\n    callback(new Error(\"Value is not true!\"))\n  }\n}\n\nvar callback = function (error, retval) {\n  if (error) {\n    console.log(error)\n    return\n  }\n  console.log(retval)\n}\n\nisTrue(false, callback)\nisTrue(true,  callback)\n\n/*\n  { stack: [Getter/Setter],\n    arguments: undefined,\n    type: undefined,\n    message: 'Value is not true!' }\n  Value was true.\n*/\n```",
    "goodToHear": [
      "This is just a convention. However, you should stick to it."
    ],
    "links": [
      "[The Node.js Way - Understanding Error-First Callbacks](http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/)",
      "[What are the error conventions?](https://docs.nodejitsu.com/articles/errors/what-are-the-error-conventions)"
    ],
    "tags": [
      "node",
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [
      "```js\nfs.readFile(filePath, function(err, data) {  \n  if (err) {\n    // handle the error, the return is important here\n    // so execution stops here\n    return console.log(err)\n  }\n  // use the data object\n  console.log(data)\n})\n```"
    ],
    "answerCodeBlocks": [
      "```js\nvar isTrue = function(value, callback) {\n  if (value === true) {\n    callback(null, \"Value was true.\")\n  } else {\n    callback(new Error(\"Value is not true!\"))\n  }\n}\n\nvar callback = function (error, retval) {\n  if (error) {\n    console.log(error)\n    return\n  }\n  console.log(retval)\n}\n\nisTrue(false, callback)\nisTrue(true,  callback)\n\n/*\n  { stack: [Getter/Setter],\n    arguments: undefined,\n    type: undefined,\n    message: 'Value is not true!' }\n  Value was true.\n*/\n```"
    ]
  },
  {
    "name": "node-event-loop.md",
    "question": "What is the event loop in Node.js?",
    "answer": "The event loop handles all async callbacks. Callbacks are queued in a loop, while other code runs, and will run one by one when the response for each one has been received.",
    "goodToHear": [
      "The event loop allows Node.js to perform non-blocking I/O operations, despite the fact that JavaScript is single-threaded"
    ],
    "links": [
      "[Node.js docs on event loop, timers and process.nextTick()](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/)"
    ],
    "tags": [
      "node",
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "null-vs-undefined.md",
    "question": "What are the differences between `null` and `undefined`?",
    "answer": "In JavaScript, two values discretely represent nothing - `undefined` and `null`. The concrete difference between them is that `null` is explicit, while `undefined` is implicit. When a property does not exist or a variable has not been given a value, the value is `undefined`. `null` is set as the value to explicitly indicate “no value”. In essence, `undefined` is used when the nothing is not known, and `null` is used when the nothing is known.",
    "goodToHear": [
      "`typeof undefined` returns `undefined`",
      "`typeof null` returns `object`. However, it is still a primitive value",
      "`undefined == null` equals to `true`"
    ],
    "links": [
      "[MDN docs for null](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null)",
      "[MDN docs for undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "object-creation.md",
    "question": "Describe the different ways to create an object. When should certain ways be preferred over others?",
    "answer": "##### Object literal\n\nOften used to store one occurrence of data.\n\n```js\nconst person = {\n  name: \"John\",\n  age: 50,\n  birthday() {\n    this.age++\n  }\n}\nperson.birthday() // person.age === 51\n```\n\n##### Constructor\n\nOften used when you need to create multiple instances of an object, each with their own data that other instances of the class cannot affect. The `new` operator must be used before invoking the constructor or the global object will be mutated.\n\n```js\nfunction Person(name, age) {\n  this.name = name\n  this.age = age\n}\nPerson.prototype.birthday = function() {\n  this.age++\n}\nconst person1 = new Person(\"John\", 50)\nconst person2 = new Person(\"Sally\", 20)\nperson1.birthday() // person1.age === 51\nperson2.birthday() // person2.age === 21\n```\n\n##### Factory function\n\nCreates a new object similar to a constructor, but can store private data using a closure. There is also no need to use `new` before invoking the function or the `this` keyword. Factory functions usually discard the idea of prototypes and keep all properties and methods as own properties of the object.\n\n```js\nconst createPerson = (name, age) => {\n  const birthday = () => person.age++\n  const person = { name, age, birthday }\n  return person\n}\nconst person = createPerson(\"John\", 50)\nperson.birthday() // person.age === 51\n```\n\n##### `Object.create()`\n\nSets the prototype of the newly created object.\n\n```js\nconst personProto = {\n  birthday() {\n    this.age++\n  }\n}\nconst person = Object.create(personProto)\nperson.age = 50\nperson.birthday() // person.age === 51\n```\n\nA second argument can also be supplied to `Object.create()` which acts as a descriptor for the new properties to be defined.\n\n```js\nObject.create(personProto, {\n  age: {\n    value: 50,\n    writable: true,\n    enumerable: true\n  }\n})\n```",
    "goodToHear": [
      "Prototypes are objects that other objects inherit properties and methods from.",
      "Factory functions offer private properties and methods through a closure but increase memory usage as a tradeoff, while classes do not have private properties or methods but reduce memory impact by reusing a single prototype object."
    ],
    "links": [
      "[Factory functions vs constructor functions vs classes](https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nconst person = {\n  name: \"John\",\n  age: 50,\n  birthday() {\n    this.age++\n  }\n}\nperson.birthday() // person.age === 51\n```",
      "```js\nfunction Person(name, age) {\n  this.name = name\n  this.age = age\n}\nPerson.prototype.birthday = function() {\n  this.age++\n}\nconst person1 = new Person(\"John\", 50)\nconst person2 = new Person(\"Sally\", 20)\nperson1.birthday() // person1.age === 51\nperson2.birthday() // person2.age === 21\n```",
      "```js\nconst createPerson = (name, age) => {\n  const birthday = () => person.age++\n  const person = { name, age, birthday }\n  return person\n}\nconst person = createPerson(\"John\", 50)\nperson.birthday() // person.age === 51\n```",
      "```js\nconst personProto = {\n  birthday() {\n    this.age++\n  }\n}\nconst person = Object.create(personProto)\nperson.age = 50\nperson.birthday() // person.age === 51\n```",
      "```js\nObject.create(personProto, {\n  age: {\n    value: 50,\n    writable: true,\n    enumerable: true\n  }\n})\n```"
    ]
  },
  {
    "name": "parameter-vs-argument.md",
    "question": "What is the difference between a parameter and an argument?",
    "answer": "Parameters are the variable names of the function definition, while arguments are the values given to a function when it is invoked.\n\n```js\nfunction myFunction(parameter1, parameter2) {\n  console.log(arguments[0]) // \"argument1\"\n}\nmyFunction(\"argument1\", \"argument2\")\n```",
    "goodToHear": [
      "`arguments` is an array-like object containing information about the arguments supplied to an invoked function.",
      "`myFunction.length` describes the arity of a function (how many parameters it has, regardless of how many arguments it is supplied)."
    ],
    "links": [],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nfunction myFunction(parameter1, parameter2) {\n  console.log(arguments[0]) // \"argument1\"\n}\nmyFunction(\"argument1\", \"argument2\")\n```"
    ]
  },
  {
    "name": "pass-by-value-reference.md",
    "question": "Does JavaScript pass by value or by reference?",
    "answer": "JavaScript always passes by value. However, with objects, the value is a reference to the object.",
    "goodToHear": [
      "Difference between pass-by-value and pass-by-reference"
    ],
    "links": [
      "[JavaScript Value vs Reference](https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "pipe.md",
    "question": "Create a function `pipe` that performs left-to-right function composition by returning a function that accepts one argument.\n\n```js\nconst square = v => v * v\nconst double = v => v * 2\nconst addOne = v => v + 1\nconst res = pipe(square, double, addOne)\nres(3) // 19; addOne(double(square(3)))\n```",
    "answer": "Gather all supplied arguments using the rest operator `...` and return a unary function that uses `Array.prototype.reduce()` to run the value through the series of functions before returning the final value.\n\n```js\nconst pipe = (...fns) => x => fns.reduce((v, fn) => fn(v), x)\n```",
    "goodToHear": [
      "Function composition is the process of combining two or more functions to produce a new function."
    ],
    "links": [
      "[What is function composition?](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-function-composition-20dfb109a1a0)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [
      "```js\nconst square = v => v * v\nconst double = v => v * 2\nconst addOne = v => v + 1\nconst res = pipe(square, double, addOne)\nres(3) // 19; addOne(double(square(3)))\n```"
    ],
    "answerCodeBlocks": [
      "```js\nconst pipe = (...fns) => x => fns.reduce((v, fn) => fn(v), x)\n```"
    ]
  },
  {
    "name": "promise-states.md",
    "question": "In which states can a Promise be?",
    "answer": "A `Promise` is in one of these states:\n\n* pending: initial state, neither fulfilled nor rejected.\n* fulfilled: meaning that the operation completed successfully.\n* rejected: meaning that the operation failed.\n\nA pending promise can either be fulfilled with a value, or rejected with a reason (error). \nWhen either of these options happens, the associated handlers queued up by a promise's then method are called.",
    "goodToHear": [],
    "links": [
      "[Official Web Docs - Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 0,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "promises.md",
    "question": "What are Promises?",
    "answer": "The `Promise` object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.\nAn example can be the following snippet, which after 100ms prints out the result string to the standard output. Also, note the catch, which can be used for error handling. `Promise`s are chainable.\n\n```js\nnew Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"result\")\n  }, 100)\n})\n  .then(console.log)\n  .catch(console.error)\n```",
    "goodToHear": [
      "Take a look into the other questions regarding `Promise`s!"
    ],
    "links": [
      "[Master the JavaScript Interview: What is a Promise?](https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e772618)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 0,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nnew Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve(\"result\")\n  }, 100)\n})\n  .then(console.log)\n  .catch(console.error)\n```"
    ]
  },
  {
    "name": "prototypal-inheritance.md",
    "question": "How does prototypal inheritance differ from classical inheritance?",
    "answer": "In the classical inheritance paradigm, object instances inherit their properties and functions from a class, which acts as a blueprint for the object. Object instances are typically created using a constructor and the `new` keyword.\n\nIn the prototypal inheritance paradigm, object instances inherit directly from other objects and are typically created using factory functions or `Object.create()`. Finally, object instances can be composed from many different objects, allowing for selective inheritance.",
    "goodToHear": [
      "Classes create hierarches and taxonomies.",
      "Prototypal inheritance allows for a flat prototype delegation hierarchy."
    ],
    "links": [
      "[MDN docs for inheritance and the prototype chain](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain)",
      "[Differences between class and prototypal inheritance](https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "reference-example.md",
    "question": "What is the output of the following code?\n\n```js\nconst a = [1, 2, 3]\nconst b = [1, 2, 3]\nconst c = \"1,2,3\"\n\n/* eslint eqeqeq: 0 */\nconsole.log(a == c)\nconsole.log(a == b)\n```",
    "answer": "The first `console.log` outputs `true` because JavaScript's compiler performs type conversion and therefore it compares to strings by their value. On the other hand, the second `console.log` outputs `false` because Arrays are Objects and Objects are compared by reference.",
    "goodToHear": [
      "JavaScript performs automatic type conversion",
      "Objects are compared by reference",
      "Primitives are compared by value"
    ],
    "links": [
      "[JavaScript Value vs Reference](https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [
      "```js\nconst a = [1, 2, 3]\nconst b = [1, 2, 3]\nconst c = \"1,2,3\"\n\n/* eslint eqeqeq: 0 */\nconsole.log(a == c)\nconsole.log(a == b)\n```"
    ],
    "answerCodeBlocks": []
  },
  {
    "name": "rel-noopener.md",
    "question": "Where and why is the `rel=\"noopener\"` attribute used?",
    "answer": "The `rel=\"noopener\"` is an attribute used in `<a>` elements (hyperlinks). It prevents pages from having a `window.opener` property, which would otherwise point to the page from where the link was opened and would allow the page opened from the hyperlink to manipulate the page where the hyperlink is.",
    "goodToHear": [
      "`rel=\"noopener\"` is applied to hyperlinks.",
      "`rel=\"noopener\"` prevents opened links from manipulating the source page."
    ],
    "links": [
      "[Open external anchors using rel=\"noopener\"](https://developers.google.com/web/tools/lighthouse/audits/noopener)",
      "[About rel=\"noopener\"](https://mathiasbynens.github.io/rel-noopener/)"
    ],
    "tags": [
      "html"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "return-semicolon.md",
    "question": "What does the following function return?\n\n```js\nfunction greet() {\n  return\n  {\n    message: \"hello\"\n  }\n}\n```",
    "answer": "Because of JavaScript's automatic semicolon insertion (ASI), the compiler places a semicolon after `return` keyword and therefore it returns `undefined` without an error being thrown.",
    "goodToHear": [
      "Automatic semicolon placement can lead to time-consuming bugs"
    ],
    "links": [
      "[Automatic semicolon insertion in JavaScript](http://2ality.com/2011/05/semicolon-insertion.html)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [
      "```js\nfunction greet() {\n  return\n  {\n    message: \"hello\"\n  }\n}\n```"
    ],
    "answerCodeBlocks": []
  },
  {
    "name": "sprites.md",
    "question": "What are the advantages of using CSS sprites and how would one utilize them?",
    "answer": "CSS sprites combine multiple images into one image, limiting the amount of HTTP requests a browser has to make, thus improving load times.\n\nTo utilize a spritesheet in CSS, one would use certain properties, such as `background-image`, `background-position` and `background-size` to ultimately alter the `background` of a CSS selector or an element.",
    "goodToHear": [
      "CSS sprites combine multiple images into one, which improves page load times by limiting requests",
      "`background-image`, `background-position` and `background-size` can be used to utilize a spritesheet"
    ],
    "links": [
      "[CSS Sprites explained by CSS Tricks](https://css-tricks.com/css-sprites/)"
    ],
    "tags": [
      "css"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "static-vs-instance-method.md",
    "question": "Explain the difference between a static method and an instance method.",
    "answer": "Static methods belong to a class and don't act on instances, while instance methods belong to the class prototype which is inherited by all instances of the class and acts on them.\n\n```js\nArray.isArray // static method of Array\nArray.prototype.push // instance method of Array\n```\n\nIn this case, the `Array.isArray` method does not make sense as an instance method of arrays because we already know the value is an array when working with it.\n\nInstance methods could technically work as static methods, but provide terser syntax:\n\n```js\nconst arr = [1, 2, 3]\narr.push(4)\nArray.push(arr, 4)\n```",
    "goodToHear": [
      "How to create static and instance methods with ES2015 class syntax"
    ],
    "links": [
      "[Classes on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nArray.isArray // static method of Array\nArray.prototype.push // instance method of Array\n```",
      "```js\nconst arr = [1, 2, 3]\narr.push(4)\nArray.push(arr, 4)\n```"
    ]
  },
  {
    "name": "sync-vs-async.md",
    "question": "What is the difference between synchronous and asynchronous code in JavaScript?",
    "answer": "Synchronous means each operation must wait for the previous one to complete.\n\nAsynchronous means an operation can occur while another operation is still being processed.\n\nIn JavaScript, all code is synchronous due to the single-threaded nature of it. However, asynchronous operations not part of the program (such as `XMLHttpRequest` or `setTimeout`) are processed outside of the main thread because they are controlled by native code (browser APIs), but callbacks part of the program will still be executed synchronously.",
    "goodToHear": [
      "JavaScript has a concurrency model based on an \"event loop\".",
      "Functions like `alert` block the main thread so that no user input is registered until the user closes it."
    ],
    "links": [],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "this.md",
    "question": "How does `this` work?",
    "answer": "The `this` keyword is an object that represents the context of an executing function. Regular functions can have their `this` value changed with `.call`, `.apply` and `.bind`. Arrow functions implicitly bind `this` so that it refers to the context of its lexical environment, regardless of whether or not its context is set explicitly with `call`.\n\nHere are some common examples of `this`:\n\n```js\n// Object literals\nvar myObject = {\n  regularFunction: function() {\n    return this\n  },\n  arrowFunction: () => {\n    return this\n  }\n}\nmyObject.regularFunction() // myObject\nmyObject.arrowFunction() // NOT myObject\nconst withoutContextFunction = myObject.regularFunction\nwithoutContextFunction() // NOT myObject\n\n// Event listeners\ndocument.body.addEventListener(\"click\", function() {\n  console.log(this) // document.body\n})\n\n// Classes\nclass myClass {\n  constructor() {\n    console.log(this) // myClassInstance\n  }\n}\nvar myClassInstance = new myClass()\n\n// Manual\nvar myFunction = function() {\n  return this\n}\nmyFunction.call({ customThis: true }) // { customThis: true }\n\n// Unwanted `this`\nvar obj = {\n  arr: [1, 2, 3],\n  doubleArr() {\n    return this.arr.map(function(value) {\n      // this === this.arr\n      return this.double(value)\n    })\n  },\n  double() {\n    return value * 2\n  }\n}\nobj.doubleArr() // Uncaught TypeError: this.double is not a function\n```",
    "goodToHear": [
      "In non-strict mode, global `this` is the global object (`window` in browsers), while in non-strict mode global `this` is `undefined`.",
      "`Function.prototype.call` and `Function.prototype.apply` set the `this` context of an executing function as the first argument, with `call` accepting a variadic number of arguments thereafter, and `apply` accepting an array as the second argument which are fed to the function in a variadic manner.",
      "`Function.prototype.bind` returns a new function that enforces the `this` context as the first argument which cannot be changed by other functions.",
      "If a function requires its `this` context to be changed based on how it is called, you must use the `function` keyword. Use arrow functions when you want `this` to be the surrounding (lexical) context."
    ],
    "links": [
      "[`this` on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\n// Object literals\nvar myObject = {\n  regularFunction: function() {\n    return this\n  },\n  arrowFunction: () => {\n    return this\n  }\n}\nmyObject.regularFunction() // myObject\nmyObject.arrowFunction() // NOT myObject\nconst withoutContextFunction = myObject.regularFunction\nwithoutContextFunction() // NOT myObject\n\n// Event listeners\ndocument.body.addEventListener(\"click\", function() {\n  console.log(this) // document.body\n})\n\n// Classes\nclass myClass {\n  constructor() {\n    console.log(this) // myClassInstance\n  }\n}\nvar myClassInstance = new myClass()\n\n// Manual\nvar myFunction = function() {\n  return this\n}\nmyFunction.call({ customThis: true }) // { customThis: true }\n\n// Unwanted `this`\nvar obj = {\n  arr: [1, 2, 3],\n  doubleArr() {\n    return this.arr.map(function(value) {\n      // this === this.arr\n      return this.double(value)\n    })\n  },\n  double() {\n    return value * 2\n  }\n}\nobj.doubleArr() // Uncaught TypeError: this.double is not a function\n```"
    ]
  },
  {
    "name": "typeof-typeof.md",
    "question": "What does the following code evaluate to?\n\n```js\ntypeof typeof 0\n```",
    "answer": "It evaluates to `\"string\"`.\n\n`typeof 0` evaluates to the string `\"number\"` and therefore `typeof \"number\"` evaluates to `\"string\"`.",
    "goodToHear": [],
    "links": [
      "[MDN docs for typeof](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [
      "```js\ntypeof typeof 0\n```"
    ],
    "answerCodeBlocks": []
  },
  {
    "name": "types.md",
    "question": "What are JavaScript data types?",
    "answer": "The latest ECMAScript standard defines seven data types, six of them being primitive: `Boolean`, `Null`, `Undefined`, `Number`, `String`, `Symbol` and one non-primitive data type: `Object`.",
    "goodToHear": [
      "Mention of newly added `Symbol` data type",
      "`Array`, `Date` and `function` are all of type `object`",
      "Functions in JavaScript are objects with the capability of being callable"
    ],
    "links": [
      "[MDN docs for data types and data structures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures)",
      "[Understanding Data Types in JavaScript](https://www.digitalocean.com/community/tutorials/understanding-data-types-in-javascript)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "ui-library-framework-purpose.md",
    "question": "What is the purpose of JavaScript UI libraries/frameworks like React, Vue, Angular, Hyperapp, etc?",
    "answer": "The main purpose is to avoid manipulating the DOM directly and keep the state of an application\nin sync with the UI easily. Additionally, they provide the ability to create components that can be reused when they have similar functionality with minor differences, avoiding duplication which would require multiple changes whenever the structure of a component which is reused in multiple places needs to be updated.\n\nWhen working with DOM manipulation libraries like jQuery, the data of an application is generally kept in the DOM itself, often as class names or `data` attributes. Manipulating the DOM to update the UI involves many extra steps and can introduce subtle bugs over time. Keeping the state separate and letting a framework handle the UI updates when the state changes reduces cognitive load, i.e. saying you want the UI to look a certain way when the state is a certain value is the declarative way of creating an application, instead of manually updating the UI to reflect the new state (imperative).",
    "goodToHear": [
      "The virtual DOM is a representation of the real DOM tree in the form of plain objects, which allows a library to write code as if the entire document is thrown away and rebuilt on each change, while the real DOM only updates what needs to be changed. Comparing the new virtual DOM against the previous one leads to high efficiency as changing real DOM nodes is costly compared to recalculating the virtual DOM.",
      "JSX is an extension to JavaScript that provides XML-like syntax to create virtual DOM objects which is transformed to function calls by a transpiler. It simplifies control flow (if statements/ternary expressions) compared to tagged template literals."
    ],
    "links": [
      "[Virtual DOM in Hyperapp](https://github.com/hyperapp/hyperapp#view)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "use-strict.md",
    "question": "What does `'use strict'` do and what are some of the key benefits to using it?",
    "answer": "Including `'use strict'` at the beginning of your JavaScript source file enables strict mode, which enfores more strict parsing and error handling of JavaScript code. It is considered a good practice and offers a lot of benefits, such as:\n\n* Easier debugging due to eliminating silent errors.\n* Disallows variable redefinition.\n* Prevents accidental global variables.\n* Oftentimes provides increased performance over identical code that is not running in strict mode.\n* Simplifies `eval()` and `arguments`.\n* Helps make JavaScript more secure.",
    "goodToHear": [
      "Eliminates `this` coercion, throwing an error when `this` references a value of `null` or `undefined`.",
      "Throws an error on invalid usage of `delete`.",
      "Prohibits some syntax likely to be defined in future versions of ECMAScript"
    ],
    "links": [
      "[MDN docs for strict mode](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 2,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  },
  {
    "name": "var-let-const.md",
    "question": "What are the differences between `var`, `let`, `const` and no keyword statements?",
    "answer": "##### No keyword prefix\n\nWhen no keyword is prefixed before a variable declaration, it is either assigning a global variable if one does not exist, or reassigns an already declared variable. In non-strict mode, it will assign the variable as a property of the global object `this` (`window` in browsers). In strict mode, it will throw an error to prevent unwanted global variables from being created.\n\n##### var\n\n`var` was the default statement to declare a variable until ES2015. It creates a function-scoped variable that can be reassigned and redeclared. However, due to its lack of block scoping, it can cause issues if the variable is being reused in a loop that contains an asynchronous callback because the variable will continue to exist outside of the block scope.\n\nBelow, by the time the the `setTimeout` callback executes, the loop has already finished and the `i` variable is `10`, so all ten callbacks reference the same variable available in the function scope.\n\n```js\nfor (var i = 0; i < 10; i++) {\n  setTimeout(() => {\n    console.log(i) // logs `10` ten times\n  })\n}\n\n/* ==================== Solutions with `var` ==================== */\nfor (var i = 0; i < 10; i++) {\n  // Passed as an argument will use the value as-is in that point in time\n  setTimeout(console.log, 0, i)\n}\n\nfor (var i = 0; i < 10; i++) {\n  // Create a new function scope that will use the value as-is in that point in time\n  ;(i => {\n    setTimeout(() => {\n      console.log(i)\n    })\n  })(i)\n}\n```\n\n##### let\n\n`let` was introduced in ES2015 and is the new preferred way to declare variables that will be reassigned later. Trying to redeclare a variable again will throw an error. It is block-scoped so that using it in a loop will keep it scoped to the iteration.\n\n```js\nfor (let i = 0; i < 10; i++) {\n  setTimeout(() => {\n    console.log(i) // logs 0, 1, 2, 3, ...\n  })\n}\n```\n\n##### const\n\n`const` was introduced in ES2015 and is the new preferred default way to declare all variables if they won't be reassigned later, even for objects that will be mutated (as long as the reference to the object does not change). It is block-scoped and cannot be reassigned.\n\n```js\nconst myObject = {}\nmyObject.prop = \"hello!\" // No error\nmyObject = \"hello\" // Error\n```",
    "goodToHear": [
      "All declarations are hoisted to the top of their scope",
      "Show a common issue with using `var` and how `let` can solve it, as well as a solution that keeps `var`.",
      "`var` should be avoided whenever possible and prefer `const` as the default declaration statement for all variables unless they will be reassigned later, then use `let` if so."
    ],
    "links": [
      "[`let` vs `const`](https://wesbos.com/let-vs-const/)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nfor (var i = 0; i < 10; i++) {\n  setTimeout(() => {\n    console.log(i) // logs `10` ten times\n  })\n}\n\n/* ==================== Solutions with `var` ==================== */\nfor (var i = 0; i < 10; i++) {\n  // Passed as an argument will use the value as-is in that point in time\n  setTimeout(console.log, 0, i)\n}\n\nfor (var i = 0; i < 10; i++) {\n  // Create a new function scope that will use the value as-is in that point in time\n  ;(i => {\n    setTimeout(() => {\n      console.log(i)\n    })\n  })(i)\n}\n```",
      "```js\nfor (let i = 0; i < 10; i++) {\n  setTimeout(() => {\n    console.log(i) // logs 0, 1, 2, 3, ...\n  })\n}\n```",
      "```js\nconst myObject = {}\nmyObject.prop = \"hello!\" // No error\nmyObject = \"hello\" // Error\n```"
    ]
  },
  {
    "name": "wrap-content.md",
    "question": "What is the reason for wrapping the entire contents of a JavaScript source file in a function?",
    "answer": "This technique is very common in JavaScript libraries. It creates a closure around the entire contents of the file which creates a private namespace and thereby helps avoid potential name clashes between different JavaScript modules and libraries. The function is usually immediately invoked so that the namespace (library name) is assigned the return value of the function.\n\n```js\nconst myLibrary = function () {\n  var privateVariable = 2\n  return {\n    publicMethod: () => privateVariable\n  }\n}()\nprivateVariable // ReferenceError\nmyLibrary.publicMethod() // 2\n```",
    "goodToHear": [
      "Used among many popular JavaScript libraries",
      "Creates a private namespace"
    ],
    "links": [
      "[MDN docs for closures](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)"
    ],
    "tags": [
      "javascript"
    ],
    "expertise": 1,
    "questionCodeBlocks": [],
    "answerCodeBlocks": [
      "```js\nconst myLibrary = function () {\n  var privateVariable = 2\n  return {\n    publicMethod: () => privateVariable\n  }\n}()\nprivateVariable // ReferenceError\nmyLibrary.publicMethod() // 2\n```"
    ]
  },
  {
    "name": "z-index.md",
    "question": "How does Z index function?",
    "answer": "When elements overlap, z-order determines which one covers the other.",
    "goodToHear": [
      "`z-index` only applies to positioned elements (except `static`)",
      "How to organize z-indexes on large scale projects"
    ],
    "links": [
      "[MDN docs for z-index](https://developer.mozilla.org/en-US/docs/Web/CSS/z-index)",
      "[Understanding CSS z-index](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index)",
      "[What No One Told You About Z-Index](https://philipwalton.com/articles/what-no-one-told-you-about-z-index/)"
    ],
    "tags": [
      "css"
    ],
    "expertise": 0,
    "questionCodeBlocks": [],
    "answerCodeBlocks": []
  }
]